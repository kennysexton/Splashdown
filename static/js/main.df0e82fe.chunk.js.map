{"version":3,"sources":["components/welcome.jsx","components/colors.jsx","components/img.jsx","components/imageGrid.jsx","App.js","serviceWorker.js","index.js"],"names":["Welcome","className","href","data-aos","data-aos-duration","Component","Colors","id","Img","props","src","url","alt","ImgageGrid","imgs","data","map","img","urls","small","key","App","state","fetch","then","response","json","setState","catch","err","console","log","this","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kRAGqBA,G,6LAEb,OACA,yBAAKC,UAAU,OACX,4BAAQA,UAAU,WAClB,0CACA,4BAASC,KAAK,YAAYC,WAAS,UAAUC,oBAAkB,OAAOH,UAAU,eAAhF,+B,GANyBI,cCDhBC,E,iLAEb,OAEA,yBAAKL,UAAU,gBAAgBM,GAAG,YAC9B,yBAAKJ,WAAS,UAAUF,UAAU,uBAClC,yBAAKE,WAAS,UAAUF,UAAU,wBAClC,yBAAKE,WAAS,UAAUF,UAAU,uBAClC,yBAAKE,WAAS,UAAUF,UAAU,wBAClC,yBAAKE,WAAS,UAAUF,UAAU,6B,GATVI,aCOrBG,EANH,SAAAC,GAAK,OACf,wBAAIR,UAAU,YACZ,yBAAKS,IAAKD,EAAME,IAAKC,IAAI,OCSdC,EAXI,SAAAJ,GAClB,IACIK,EADYL,EAAMM,KACHC,IAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,CAAKN,IAAKM,EAAIC,KAAKC,MAAOC,IAAKH,EAAIV,OAEjE,OACC,wBAAIN,UAAU,YACZa,ICuEWO,M,YAnEb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXR,KAAM,IAHI,E,iFAOO,IAAD,OAClBS,MAAM,+GACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAT,GACJ,EAAKY,SAAS,CAAEb,KAAMC,MAEvBa,MAAM,SAAAC,GACLC,QAAQC,IAAI,kCAAmCF,O,+BAInD,OAgBE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWd,KAAMiB,KAAKV,MAAMR,Y,GAtClBT,aCAE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.df0e82fe.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\n\nexport default class Welcome extends Component {\n    render() {\n        return (\n        <div className=\"App\">\n            <header className=\"Welcome\">\n            <h1>Splashdown</h1>\n            <button  href=\"#colordiv\" data-aos=\"fade-up\" data-aos-duration=\"1000\" className=\"Gen-button \">\n                Generate Color Scheme\n            </button>\n            </header>\n        </div>\n        );\n    }\n}","import React, { Component } from 'react'\n\nexport default class Colors extends Component {\n    render() {\n        return (\n\n        <div className=\"Generate-main\" id=\"colordiv\">\n            <div data-aos=\"fade-up\" className=\"Generate-card blue\"></div>\n            <div data-aos=\"fade-up\" className=\"Generate-card green\"></div>\n            <div data-aos=\"fade-up\" className=\"Generate-card blue\"></div>\n            <div data-aos=\"fade-up\" className=\"Generate-card green\"></div>\n            <div data-aos=\"fade-up\" className=\"Generate-card blue \"></div>\n      </div>\n        );\n    }\n} ","import React from 'react';\n\n//\nconst Img = props => (\n  <li className=\"img-wrap\">\n    <img src={props.url} alt=\"\"/>\n  </li>\n);\n\nexport default Img;","import React from 'react';\nimport Img from './img';\n\nconst ImgageGrid = props => {\n\tconst results = props.data;\n\tlet imgs = results.map(img => <Img url={img.urls.small} key={img.id}/>);\n\n\treturn (\n\t\t<ul className=\"img-list\">\n\t\t\t{imgs}\n\t\t</ul>\n\t);\n};\n\nexport default ImgageGrid;","import React, { Component } from 'react';\nimport Unsplash from 'unsplash-js';\n\nimport './App.css';\n\n//My Components\nimport Welcome from './components/welcome'\nimport Colors from './components/colors'\nimport ImageGrid from './components/imageGrid.jsx'\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      imgs: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://api.unsplash.com/photos/?client_id=' + process.env.REACT_APP_API_KEY)  \n      .then(response => response.json())\n      .then(data => {\n        this.setState({ imgs: data });\n      })\n      .catch(err => {\n        console.log('Error happened during fetching!', err);\n      });\n  }\n  render() {\n    return (\n      // <Router>\n      // <div className=\"App\">\n      //   <header className=\"App-header\">\n      //     {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n      //     <h1>Splashdown</h1>\n      //     <Link className=\"App-button\" to=\"/generate/\">\n      //       {/* <button className=\"App-button\"> */}\n      //       Generate Color Scheme\n      //     {/* </button> */}\n      //     </Link>\n      //   </header>\n      // </div>\n      // <Route path=\"/generate\" exact component={generate} />\n      // <generate />\n      // </Router>\n      <div>\n        <Welcome></Welcome>\n        <Colors></Colors>\n        <ImageGrid data={this.state.imgs} />\n        \n\n      </div>\n      \n    );\n  }\n\n}\n\nfunction generate() {\n  return (\n   \n  //  <ScrollTo>\n  //   {({ scrollTo }) => (\n  //     <a onClick={() => scrollTo({ x: 0, y: 500 })}>Scroll to Bottom</a>\n  //   )}\n    <div className=\"Generate-main\">\n       \n          <div className=\"Generate-card blue\"></div>\n          <div className=\"Generate-card mr green\"></div>\n          <div className=\"Generate-card mr blue \"></div>\n          <div className=\"Generate-card mr green\"></div>\n          <div className=\"Generate-card blue\"></div>\n\n    </div>\n  // </ScrollTo>\n\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}