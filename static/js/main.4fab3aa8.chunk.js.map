{"version":3,"sources":["utils/common.js","components/Spinner.js","components/CityName.js","components/ImageBackground.js","components/Weather.js","components/SettingsModal.js","App.js","serviceWorker.js","index.js"],"names":["citiesArray","Spinner","className","CityName","props","data","ImageBackground","style","background","full","backgroundSize","Weather","weather","src","icon","alt","SettingsModal","color1","color2","useState","color","setColor","onChange","units","type","symbol","flipUnit","value","href","photographerLink","name","unsplashLink","App","input","city","setCity","imgs","setImgs","photographer","setPhotographer","setPhotographerLink","setUnsplashLink","temperature","setTemperature","setIcon","setUnits","hidden","setHidden","loading","setLoading","useEffect","randomCity","length","randomNumber","Math","floor","random","console","log","getRandomCity","unsplashQuery","process","fetch","then","response","json","result","results","urls","user","links","html","catch","err","error","openWeatherQuery","main","temp","onClick","round","convertUnits","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4fab3aa8.chunk.js","sourcesContent":["// List of cities\nconst citiesArray = [\"Hong Kong, Hong Kong\", \"Singapore\", \"Bangkok, Thailand\", \"London, United Kingdom\", \"Paris, France\", \"Macau\", \"New York City, USA\", \"Shenzhen, China\", \"Kuala Lumpur, Malaysia\", \"Antalya, Turkey\", \"Istanbul, Turkey\", \"Dubai, United Arab Emirates\", \"Seoul, South Korea\", \"Rome, Italy\", \"Phuket, Thailand\", \"Guangzhou, China\", \"Mecca, Saudi Arabia\", \"Pattaya, Thailand\", \"Taipei, Taiwan\", \"Miami, USA\", \"Prague, Czech Republic\", \"Shanghai, China\", \"Las Vegas, USA\", \"Milan, Italy\", \"Barcelona, Spain\", \"Moscow, Russia\", \"Amsterdam, Netherlands\", \"Vienna, Austria\", \"Venice, Italy\", \"Los Angeles, USA\", \"Lima, Peru\", \"Tokyo, Japan\", \"Johannesburg, South Africa\", \"Beijing, China\", \"Sofia, Bulgaria\", \"Orlando, USA\", \"Berlin, Germany\", \"Budapest, Hungary\", \"Ho Chi Minh City, Vietnam\", \"Florence, Italy\", \"Madrid, Spain\", \"Warsaw, Poland\", \"Doha, Qatar\", \"Nairobi, Kenya\", \"Delhi, India\", \"Mumbai, India\", \"Chennai, India\", \"Mexico City, Mexico\", \"Dublin, Ireland\", \"San Francisco, USA\", \"Hangzhou, China\", \"Denpasar, Indonesia\", \"Philadelphia, USA\", \"Muğla, Turkey\", \"Brussels, Belgium\", \"Burgas, Bulgaria\", \"Munich, Germany\", \"Zhuhai, China\", \"Sydney, Australia\", \"Edirne, Turkey\", \"Toronto, Canada\", \"Lisbon, Portugal\", \"Cancún, Mexico\", \"Buenos Aires, Argentina\", \"Cairo, Egypt\", \"Punta Cana, Domincan Republic\", \"Suzhou, China\", \"Djerba, Tunisia\", \"Agra, India\", \"Kraków, Poland\", \"Bucharest, Romania\", \"Siem Reap, Cambodia\", \"Jaipur, India\", \"Honolulu, USA\", \"Manama, Bahrain\", \"Dammam, Saudi Arabia\", \"Hanoi, Vietnam\", \"Andorra La Vella, Andorra\", \"Nice, France\", \"Zürich, Switzerland\", \"Jakarta, Indonesia\", \"Manila, Philippines\", \"Chiang Mai, Thailand\", \"Marrakech, Morocco\", \"Sharm El Sheikh, Egypt\", \"Frankfurt, Germany\", \"Abu Dhabi, United Arab Emirates\", \"Vancouver, Canada\", \"Guilin, China\", \"Melbourne, Australia\", \"Rio De Janeiro, Brazil\", \"Riyadh, Saudi Arabia\", \"Amman, Jordan\", \"Sousse, Tunisia\", \"Kiev, Ukraine\", \"Sharjah, United Arab Emirates\", \"Jeju-do, South Korea\", \"Krabi, Thailand\", \"Artvin, Turkey\"]\n\n// Gets a random city from a predefined list\nexport function getRandomCity() {\n    var length = citiesArray.length;\n    var randomNumber = Math.floor(Math.random() * length);\n    console.log(`City Selection number: ${randomNumber}`)\n    console.log(citiesArray[randomNumber])\n    return citiesArray[randomNumber]\n}\n\n// Roud decimal\nexport function round(input) {\n    var number = Math.round(input);\n    return number;\n}","import React from 'react'\n\nfunction Spinner() {\n\n    return (\n        <div className=\"sk-folding-cube\">\n            <div className=\"sk-cube1 sk-cube\"></div>\n            <div className=\"sk-cube2 sk-cube\"></div>\n            <div className=\"sk-cube4 sk-cube\"></div>\n            <div className=\"sk-cube3 sk-cube\"></div>\n        </div>\n\n    );\n}\n\nexport default Spinner","import React from 'react'\n\nfunction CityName(props) {\n    return (\n        <header className=\"City-Name\">\n            <h1>{props.data}</h1>\n        </header>\n    );\n}\n\nexport default CityName","import React from 'react';\n\n// Uses css inline styling to take advantage of this method css centering\nconst ImageBackground = props => (\n        <div style={{\n                background: 'url(' + props.data.full + ') no-repeat center center fixed',\n                backgroundSize: \"cover\"\n        }} className=\"bg\">\n        </div>\n);\n\nexport default ImageBackground;","import React from 'react'\n\nfunction Weather(props) {\n\n    return (\n        <div className=\"weather-information\">\n            <h2>{props.weather}</h2>\n            <img className=\"weather-icon\" src={'https://openweathermap.org/img/wn/' + props.icon + '@2x.png'} alt=\"current weather icon\" />\n        </div>\n\n    );\n}\n\nexport default Weather;","import React, { useState } from 'react'\n\nfunction SettingsModal(props) {\n\n    // Color handled at this component,  rest of state comes from parent\n    const color1 = \"#C2E66E\"\n    const color2 = \"#96e6a1\"\n    const [color, setColor] = useState(color1);\n\n    return (\n        <div className=\"settings-menu\">\n            <div className=\"setting-menu-content\">\n                <h3>Units</h3>\n                <label className=\"switch\" >\n                    <input onChange={() => flipUnit()} value={props.units.type} type=\"checkbox\" />\n                    <span className=\"slider round\" > </span>\n                </label>\n                <h4 style={{ color: { color }.color }}>{props.units.symbol}</h4>\n                <h5 >Photo by <a href={props.photographerLink}>{props.name}</a> on <a href={props.unsplashLink}>Unsplash</a></h5>\n            </div>\n        </div>\n    );\n\n    function flipUnit() {\n        var units = {}\n        if (props.units.type !== \"metric\") {\n            units.type = \"metric\"\n            units.symbol = \"°C\"\n            setColor(color2)\n        } else {\n            units.type = \"imperial\"\n            units.symbol = \"°F\"\n            setColor(color1)\n        }\n\n        // Call Parents on change\n        props.onChange(units)\n    }\n}\n\nexport default SettingsModal;\n","// Run: npm start \n// Build: npm run deploy\n\nimport React, { useState, useEffect } from 'react';\nimport { getRandomCity, round } from '../src/utils/common'\n\n// CSS\nimport './App.css';\nimport './components/spinner.css';\nimport './components/settingsModal.css'\n\n//My Components\nimport Spinner from './components/Spinner'\nimport CityName from './components/CityName'\nimport ImageBackground from './components/ImageBackground'\nimport Weather from './components/Weather'\nimport SettingsModal from './components/SettingsModal';\n\nfunction App() {\n\n  // Unsplash backlink guidelines\n  const linkBackAttribute = \"?utm_source=Splashdown&utm_medium=referral\"\n\n  const [city, setCity] = useState(null);\n\n  // Unsplash\n  const [imgs, setImgs] = useState(\"\");\n  const [photographer, setPhotographer] = useState(\"\")\n  const [photographerLink, setPhotographerLink] = useState(\"\")\n  const [unsplashLink, setUnsplashLink] = useState(\"\")\n\n  // OpenWeather\n  const [temperature, setTemperature] = useState(null);\n  const [icon, setIcon] = useState(null);\n  const [units, setUnits] = useState({ type: \"imperial\", symbol: \"°F\" });\n\n  //Visibility Toggles\n  const [hidden, setHidden] = useState(true);\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const randomCity = getRandomCity()\n    setCity(randomCity)\n    console.log(`Shown City:  ${randomCity}`)\n    const unsplashQuery = `https://api.unsplash.com/search/photos/?page=1$per_page=1&query=${randomCity}&client_id=${process.env.REACT_APP_UNSPLASH_KEY}`\n    fetch(unsplashQuery)\n      .then(response => response.json())\n      .then(data => {\n        const result = data.results[0]\n        setImgs(result.urls);\n        setPhotographerLink(result.user.links.html + linkBackAttribute)\n        setUnsplashLink(result.links.html + linkBackAttribute)\n        setPhotographer(result.user.name)\n\n        setLoading(false) // TODO move this trigger to imageBackground componenet to represent to load\n      })\n      .catch(err => {\n        console.error(`Unsplash API error (${err})! Query: ${unsplashQuery}`);\n      });\n\n    const openWeatherQuery = `https://api.openweathermap.org/data/2.5/weather?q=${randomCity}&units=${units.type}&apiKey=${process.env.REACT_APP_OPEN_WEATHER_KEY}`\n    fetch(openWeatherQuery)\n      .then(response => response.json())\n      .then(data => {\n        setTemperature(data.main.temp);\n        setIcon(data.weather[0].icon);\n      })\n      .catch(err => {\n        console.error(`OpenWeather API error (${err})! Query: ${openWeatherQuery}`);\n      });\n  }, []);\n\n  return (\n    <div>\n      {loading ? (<Spinner></Spinner>) : (\n        <ImageBackground data={imgs} />\n      )}\n\n      <div onClick={() => toggleHidden()}>\n        {/* Displays the name of the city */}\n        <CityName data={city} />\n\n        {/* Shows weather information */}\n        <Weather weather={`${round(temperature)}${units.symbol}`} icon={icon}></Weather>\n      </div>\n\n      {/* Shows settings and credits */}\n      {hidden ? <div></div> : <SettingsModal photographerLink={photographerLink}\n        name={photographer}\n        unsplashLink={unsplashLink}\n        units={units}\n        onChange={(units) => convertUnits(units)} />}\n      <div className=\"bottomGradient\"></div>\n\n    </div>\n  );\n\n  function toggleHidden() {\n    setHidden(hidden => !hidden);\n  };\n\n  // Do this math locally instead of refetching from API\n  function convertUnits(units) {\n    switch (units.type) {\n      case \"metric\":\n        setTemperature((temperature - 32) / 1.8)\n        break;\n      case \"imperial\":\n        setTemperature((temperature * 1.8) + 32)\n        break;\n      default:\n        console.error(`${units.type} is not valid`)\n        break;\n    }\n    setUnits(units)\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}